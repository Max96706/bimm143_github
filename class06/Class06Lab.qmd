---
title: "Class 06: R Functions"
author: "Andres Sandoval"
format: gfm
---

# R Functions

In this class we will work through the process of developing our own function for calculating average grades for fictional students in a fictional class. 

We will start with a simplified version of the problem. Grade some vectors of student scores. We want to drop the lowest score and get the average. 


## Example input vectors to start with
```{r}
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

We can use the `mean()` function to get the average. 

```{r}
mean(student1)
```

We can find the smallest value with the `min()` function

```{r}
min(student1)
```

Use Function key and F1 to pull up the help page

There is also the `which.min()` function. Let's see if this can help. You can also use the Fn + F1 key to seek help.

```{r}
student1
```

```{r}
which.min(student1)
```

The following code will return the value of the minimum using the position function. 
```{r}
student1[which.min(student1)]
```

```{r}
x <- 1:5
x
```

Using the `[-#]` will include all values in the vector besides that number.
```{r}
x[4]
x[-4]
```


This code calculates the mean after dropping the lowest score. The `student1[-which.min(student1)]` will include all values but the lowest score. 
```{r}
mean(student1[-which.min(student1)])
```


Will this work for student2?
```{r}
student2
```

```{r}
mean(student2[-which.min(student2)])
```


```{r}
which.min(student2)
```

```{r}
student2[-which.min(student2)]
```

```{r}
mean(student2[-which.min(student2)])
```

```{r}
mean(c(5,5,5,NA))
```

After evaluating the help page, decided to use the weighted.mean function in order to access the `na.rm`. This will remove the NA from mean calculation (from both the sum of values and the total amount of values).

Can I use this argument for student2?
```{r}
weighted.mean(student2[-which.min(student2)], na.rm = TRUE)
```

Does this work for student 3? 
```{r}
student3
```

With this code, 90 gets dropped as it is both the lowest and the highest score.
```{r}
weighted.mean(student3[-which.min(student3)], na.rm = TRUE)
```

This function inflates the score as well since only one score is calculated in the function. The NAs are not taken into consideration. 
```{r}
mean(student3, na.rm=TRUE)
```

So this sucks. It inflates grades as it drops all the NAs before determining the mean...

After using a Google search, I want to know how does function `is.na()` work?

```{r}
student3
is.na(student3)
```

```{r}
student2
is.na(student2)
```


I can use a logical vector to index another vector. In other words, index means access the true elements of the other vector. 

```{r}
x <- 1:5
x[x > 3]
```


```{r}
student2[is.na(student2)]
```

```{r}
student2[is.na(student2)] <- 0
student2
```

Combine new method with old method
```{r}
x <- student3
x[is.na(x)] <- 0
mean(x[-which.min(x)])
```

We have our working snippet of code! This is now going to be the body of our function. 
All functions in R have at least 3 things:
-A name (we pick that)
-input arguments
-a body (the code that does the work)


```{r}
grade <- function(x) {
  # Mask NA to zero
  x[is.na(x)] <- 0
  # drop lowest value and get mean
  mean(x[-which.min(x)])
}
```

Let's try it out. Be sure to run code before the running it. 
```{r}
grade(student1)
grade(student2)
grade(student3)
```


> Q1. Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]


```{r}
gradebook <- read.csv("https://tinyurl.com/gradeinput", row.names = 1)
head(gradebook)
```

I can use the super useful, but a bit more complicated `apply()` function to use our existing `grade()` function on the whole class gradebook. 

How does this apply function work? 
```{r}
results <- apply(gradebook, 1, grade)
results
```

Apply(gradebook, Margin = 1 , grade)
where 
input = gradebook 
margin = rows (if it was 2, it would be columns)
function = grade


>Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook? [3pts]

```{r}
which.max(results)
```


>Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? [2pts]

Find the average of each column and find the lowest, or change the apply function to columns.

```{r}
apply(gradebook, 2, sum, na.rm= TRUE)
```
**The correct answer is hw2.**
```{r}
#This is the correct answer
which.min(apply(gradebook, 2, sum, na.rm= TRUE))
```



*Try using Mean. This will spit out the wrong answer unless the NAs are masked.* 
```{r}
#not a good way because the mean is taken down by the NA
apply(gradebook, 2, mean, na.rm=TRUE)
```

```{r}
#not the correct answer
which.min(apply(gradebook, 2, mean, na.rm=TRUE))
```
*If I want to use the mean approach, I will need to mask the NA (missing homework to zero first):*
```{r}
mask <- gradebook
mask[is.na(mask)]<- 0
mask
```




>Q4. Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)? [1pt]

Here we are going to look at the correlation of each homework results (i.e. the columns in the gradebook) with the overall grade of students from the course (in the `results` object obtained from using our `grade()` function).



```{r}
results
```

```{r}
mask$hw4
```


I am going to use the `cor()` function: 
```{r}
cor(results, mask$hw1)
cor(results, mask$hw2)
cor(results, mask$hw3)
cor(results, mask$hw4)
cor(results, mask$hw5)
```

```{r}
#correlation function is comparing the results to the mask
cor(results, mask)
```

Use apply function for the correlation
```{r}
#the results section is the 'optional arguments' to the function. In this case we needed to correlate the mask matrix to the results matrix.
apply(mask, 2, cor, results)
```

**The Homework with the highest correlation is...**
```{r}
which.max(apply(mask, 2, cor, results))
```
**Homework 5**
