---
title: "Class 09: Structural Bioinformatics 1"
author: "Andres Sandoval"
format: gfm
---

# What is PDB anyway? 

The main database of biomolecular structures is called PDB and is available at www.rcsb.org.

Let's begin by seeing what is in this database: 


```{r}
pdbstats <- read.csv("Data Export Summary.csv", row.names=1)
head(pdbstats)
```


>Q1: What percentage of structures in the PDB are solved by X-Ray and Electron Microscopy.

First you need to change the vectors to numeric. The original csv file is reading the numbers as characters. However, the `as.numeric()` function does not allow commas in the numerics to be read (results in NA). Therefore you need to use the `gsub()` function in order to remove the commas, and then you can use the `as.numeric()` function. 
```{r}
pdbstats$X.ray
gsub(",", "", pdbstats$X.ray)
as.numeric(gsub(",", "", pdbstats$X.ray))
n.xray <- sum(as.numeric(gsub(",", "", pdbstats$X.ray)))

# repeat for pdbstats$EM
n.em <- sum(as.numeric(gsub(",", "", pdbstats$EM)))

#repeat for Total
n.total <- sum(as.numeric(gsub(",", "", pdbstats$Total)))

#Use round function to get two significant figures in the percentage 
round(n.xray/n.total *100, digits = 2)
round(n.em/n.total *100, digits = 2)

```
X.Ray is 85.90% while EM is 7.02%


>Q2: What proportion of structures in the PDB are protein?

```{r}
round(as.numeric(gsub(",", "", pdbstats[1,7])) / n.total *100, digits=2)
```
86.89 % of structures are proteins. 



How to add a picture: ![Caption] (image name)

>Q3: Type HIV in the PDB website search box on the home page and determine how many HIV-1 protease structures are in the current PDB?

It is not straightforward to find all HIV-1 Protease structures using plain text searching on the database. 



>Q4: Water molecules normally have 3 atoms. Why do we see just one atom per water molecule in this structure?


We only see the oxygen atom due to the resolution of 2.00 A. Hydrogen atoms need to have a resolution of 1.00 A or lower. 



>Q5: There is a critical “conserved” water molecule in the binding site. Can you identify this water molecule? What residue number does this water molecule have

![The "conserved" water molecule at residue 308](1HSG (1).png)

The water molecule was identified. The residue number was 308. 

>Q6: Generate and save a figure clearly showing the two distinct chains of HIV-protease along with the ligand. You might also consider showing the catalytic residues ASP 25 in each chain and the critical water (we recommend “Ball & Stick” for these side-chains). Add this figure to your Quarto document.

![ASP 25 catalytic residues](1HSG.png)



# Introduction to Bio3D in R

Access bio3d package
```{r}
library(bio3d)
pdb <- read.pdb("1hsg")
pdb
```


```{r}
head(pdb$atom)
```

>What is the first residue 3 letter code and 1 letter code?

```{r}
pdb$atom$resid[1]
aa321(pdb$atom$resid[1])
```


>Q7: How many amino acid residues are there in this pdb object? 

198

>Q8: Name one of the two non-protein residues? 

HOH


>Q9: How many protein chains are in this structure? 

2


## Predicting funcitonal motions of a single structure

Let’s read a new PDB structure of Adenylate Kinase (PDB code: 6s36) and perform Normal mode analysis.

```{r}
adk <- read.pdb("6s36")
adk
```

Normal mode analysis (NMA) is a structural bioinformatics method to predict protein flexibility and potential functional motions (a.k.a. conformational changes). `nma()`

```{r}
m <- nma(adk)
```

```{r}
plot(m)
```

Make a little movie. To view a “movie” of these predicted motions we can generate a molecular “trajectory” with the `mktrj() function`.

```{r}
mktrj(m, file="adk_m7.pdb")
```



# Section 4: Comparative Structure Analysis

Today we are continuing where we left off last day building towards completing the loop from biomolecular structural data to our new analysis methods like PCA and clustering. 

>Q10. Which of the packages above is found only on BioConductor and not CRAN? 

"msa"

>Q11. Which of the above packages is not found on BioConductor or CRAN?: 

bio3d-view

>Q12. True or False? Functions from the devtools package can be used to install packages from GitHub and BitBucket?

TRUE



```{r}
library(bio3d)
aa <- get.seq("1ake_A")
aa
```


>Q13. How many amino acids are in this sequence, i.e. how long is this sequence? 

214 amino acids


Now we can use this sequence as a query to BLAST search the PDB to find similar sequences and structures.

```{r}
# Blast or hmmer search 
#b <- blast.pdb(aa)
```

I could save and load my BLAST results next time so I don't need to run the search every time. 

```{r}
#saveRDS(b, file = "blast_results.RDS")

#need to comment out  save function as the blast function was commented out
```

```{r}
b <- readRDS("blast_results.RDS")
```


A summary plot of our BLAST results
```{r}
hits <- plot(b)
```
```{r}
hits$pdb.id
```

```{r}
# Download releated PDB files
files <- get.pdb(hits$pdb.id, path="pdbs", split=TRUE, gzip=TRUE)
```


Next we are gping to align and supperpose all these structures. 

```{r}
# Align releated PDBs
pdbs <- pdbaln(files, fit = TRUE, exefile="msa")
```

## Make a plot of the alignments

```{r}
# Vector containing PDB codes for figure axis
ids <- basename.pdb(pdbs$id)

# Draw schematic alignment
#plot(pdbs, labels=ids)
```

And collect annotation for each entry 

```{r}
anno <- pdb.annotate(ids)
unique(anno$source)
head(anno)
```


## Principal Component Analysis

Time for PCA. We will not use the `prcomp()` function from base R but the `pca()` function from the `bio3d` package as this one is designed to work nicely with biomolecular data. 

```{r}
# Perform PCA
pc.xray <- pca(pdbs)
plot(pc.xray)
```


We can now focus in on PC1 vs PC2

```{r}
# Calculate RMSD
rd <- rmsd(pdbs)

# Structure-based clustering
hc.rd <- hclust(dist(rd))
plot(hc.rd)
grps.rd <- cutree(hc.rd, k=3)
```

And now my PC plot colored by clustering group. 
```{r}
plot(pc.xray, 1:2, col="grey50", bg=grps.rd, pch=21, cex=1)
```

To visualize the major structural variations in the ensemble the function `mktrj()` can be used to generate a trajectory PDB file by interpolating along a give PC (eigenvector):


```{r}
# Visualize first principal component
pc1 <- mktrj(pc.xray, pc=1, file="pc_1.pdb")
```

We can now open this trajectory file in Molstar to view a movie of the major differences. 

